#include "xparameters.h"
#include "xstatus.h"
#include "xuartlite.h"
#include <stdlib.h>
#include <stdio.h>

#define MAX_CLUSTERS 50
#define MAX_ITERATIONS 100
#define DELTA 0.01

#define UARTLITE_BASEADDR XPAR_UARTLITE_1_BASEADDR
#define TEST_BUFFER_SIZE 16
#define MAX_CLUSTERS 16
#define MAX_ITERATIONS 100
#define BIG_float 1000000.0

int n;
int k;
int dim;
int * cluster_indexes;

u8 SendBuffer[TEST_BUFFER_SIZE];
u8 RecvBuffer[TEST_BUFFER_SIZE];

void putShort(short input_short)
{
	XUartLite_SendByte(UARTLITE_BASEADDR, input_short&255);
	XUartLite_SendByte(UARTLITE_BASEADDR, input_short>>8);
}

short getShort(void)
{
	short out_short;
	out_short = XUartLite_RecvByte(UARTLITE_BASEADDR);
	out_short = out_short + (XUartLite_RecvByte(UARTLITE_BASEADDR)<<8);
	return out_short;
}

float calculateDistance(int p1[dim], float p2[dim])
  {
    float distance = 0;
    int i;
    for (i = 0; i < dim; i++)
		distance += (p1[i] - p2[i])*(p1[i] - p2[i]);

    return distance;
  }

void findNextCentroid(int x[n][dim],float cluster_centroid[k][dim],int m)
{
    int i,j,l,skip=0,index=0;
	float avg,avg_max=0;
    if(m==0)
        for(i=0;i<dim;i++)
        {
			cluster_centroid[m][i]=x[m][i];
        }
    else
    {
        for(i=0;i<n;i++)
        {
            skip=0;
            for(l=0;l<m;l++)
				if(calculateDistance(x[i],cluster_centroid[l])<DELTA)
					skip=1;
            if(skip)
                continue;

			avg=0;
            for(j=0;j<m;j++)
            {
                avg+=calculateDistance(x[i],cluster_centroid[j])/m;
            }
            if(avg>avg_max)
            {
                index=i;
                avg_max=avg;
            }
        }

		for(i=0;i<dim;i++)
			cluster_centroid[m][i]=x[index][i];
    }

}

void find_index()
{
	srand(10000);
    int i,j,index;
    for(i=0;i<k;i++){
        index = rand() %n;
        cluster_indexes[i] = index;
        for(j=0;j<i;j++)
            if(cluster_indexes[j] == index)
            {
                i--;
                break;
            }

    }
    return;

}

void init(int x[n][dim], float cluster_centroid[k][dim])
{
	/*
    int i, j;
	for(i=0;i<n;i++)
		for(j=0;j<dim;j++)
			x[i][j]=getShort();

    for(i=0;i<k;i++)
        findNextCentroid(x,cluster_centroid,i);
    */
	int i,j, mycenter_index;
	for(i=0;i<n;i++)
	{
		for(j=0;j<dim;j++)
			x[i][j]=getShort();
	}
	find_index();
	for(i=0;i<k;i++)
	{
		mycenter_index = cluster_indexes[i];
		for(j=0;j<dim;j++)
			cluster_centroid[i][j]=x[mycenter_index][j];
	}
}

void calculateDistancesMatrix(int x[n][dim], float centroid[k][dim], float distance[n][k])
  {
	int i,j;
    for (i = 0; i < n; i++)		// for each point
		for (j = 0; j < k; j++)	// for each cluster
			distance[i][j] = calculateDistance(x[i], centroid[j]);
  }

void calculateClusters(int x[n][dim], float cluster_centroid[k][dim], int cluster_assignment_index[n])
  {
	  int i,j;
	  float distance_array[n][k];
	  calculateDistancesMatrix(x,cluster_centroid,distance_array);
	  for (i = 0; i < n; i++)
      {
        int best_index = -1;
        float closest_distance = BIG_float;
		for (j = 0; j < k; j++)
        {
			float cur_distance = distance_array[i][j];
            if (cur_distance < closest_distance)
            {
                best_index = j;
                closest_distance = cur_distance;
            }
        }
        cluster_assignment_index[i] = best_index;
      }
  }

void calculateClustersCentroids(int x[n][dim], int cluster_assignment_index[n], float new_cluster_centroid[n][dim])
  {
    int i,j;
    int cluster_member_count[MAX_CLUSTERS];
    for (i = 0; i < k; i++)
    {
		cluster_member_count[i] = 0;
        for (j = 0; j < dim; j++)
          new_cluster_centroid[i][j] = 0;
    }

	for (i = 0; i < n; i++)
    {
		int active_cluster = cluster_assignment_index[i];
		cluster_member_count[active_cluster]++;

		for (j = 0; j < dim; j++)
          new_cluster_centroid[active_cluster][j] += x[i][j];
    }
	for (i = 0; i < k; i++)
    {
        if (cluster_member_count[i] != 0)
			for (j = 0; j < dim; j++)
				new_cluster_centroid[i][j] /= cluster_member_count[i];
    }
  }

float calculateTotalDistance(int x[n][dim], float centroids[k][dim], int cluster_assignment_index[n])
  {
    float tot_D = 0;
    int i;
    for (i = 0; i < n; i++)
	{
		int active_cluster = cluster_assignment_index[i];
		if (active_cluster != -1)
			tot_D += calculateDistance(x[i], centroids[active_cluster]);
	}
    return tot_D;
  }

void arraysCopy(int *src, int *tgt, int len)
  {
	int i;
    for (i = 0; i < len; i++)
		tgt[i] = src[i];
  }

int arraysDifference(int *src, int *tgt, int len)
  {
    int change_count = 0;
    int i;
    for (i = 0; i < len; i++)
		if (src[i] != tgt[i])
			change_count++;

    return change_count;
  }

void printResult(int cluster_assignment_index[n], float cluster_centroid[k][dim])
  {
	int i,j;
	//xil_printf(" Centroids: ");
	for (i = 0; i < k; i++)
		for (j = 0; j < dim; j++)
			putShort((short)cluster_centroid[i][j]);

	//xil_printf(" Assignment Array: ");
	for (i = 0; i < n; i++)
		putShort((short)cluster_assignment_index[i]);
	return;
  }

void kmeans(int x[n][dim], float cluster_centroid[k][dim], int cluster_assignment_final[n])
  {
	int i;
    int   cluster_assignment_cur[n], cluster_assignment_prev[n], batch_iteration = 0;
    float totD, prev_totD = BIG_float;

	// initial setup
    calculateClusters(x, cluster_centroid, cluster_assignment_cur);
    arraysCopy(cluster_assignment_cur, cluster_assignment_prev, n);
    //xil_printf(" Initialization Result: ");
    //printResult( cluster_assignment_cur, cluster_centroid);

    while (batch_iteration < MAX_ITERATIONS)
    {
		// update cluster centroids
		calculateClustersCentroids(x, cluster_assignment_cur, cluster_centroid);
        calculateClusters(x, cluster_centroid, cluster_assignment_cur);
    	//xil_printf(" Iteration Result: ");
        //printResult( cluster_assignment_cur, cluster_centroid);

        // see if we've failed to improve
		totD = calculateTotalDistance(x, cluster_centroid, cluster_assignment_cur);
		if (((prev_totD-totD)<DELTA) && (batch_iteration > 20))
		{
	    	//xil_printf(" Total Distance ");
            break;
		}

		// done with this phase if nothing has changed
        if ((arraysDifference(cluster_assignment_cur, cluster_assignment_prev, n) == 0) && (batch_iteration > 20))
        {
        	//xil_printf(" Change Count ");
			break;
        }

		arraysCopy(cluster_assignment_cur, cluster_assignment_prev, n);
        prev_totD = totD;
        batch_iteration++;
	}



    printResult( cluster_assignment_cur, cluster_centroid);
	// write to output array
    arraysCopy(cluster_assignment_cur, cluster_assignment_final, n);

  }

void test()
{
	int i;
	for(i=0;i<1;i++)
		putShort((short)i);
	return;
}

int main()
{
	//xil_printf(" Enter Nodes: ");
	int x[n][dim];
    float centers[k][dim];
    int assignment_final[n];
    getShort();
    getShort();
    getShort();
    n=50;
    k=10;
    dim=64;
    cluster_indexes = malloc(k*sizeof(int));
    init(x,centers);
	kmeans(x,centers,assignment_final);
	//test();
	while(1);
    return 0;
}
